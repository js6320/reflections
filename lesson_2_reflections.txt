What happens when you initialize a repository? Why do you need to do it?

	you can make a commit for multiple files at once. It is nice when you work on multiple files but it relates to each other very closely, so you need to make changes at the same time.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	staging area is pre-stage to make a commit. it is not in the repository yet, but more ready than being in working directory. this way, you can make changes for each file seperately, but still make just one commit all together.

How can you use the staging area to make sure you have one commit per logical
change?

	I don't have to commit everytime I make a change for each file, once I'm done with one file, I use stage area and add the file to there. Then work on another file. After all the changes are made for every file, I can commit all fo them at once.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	when you want to experiment some code but not really sure it will work or you will ever use this version of code, you can just try out. if it doesn't work you don't have to use it, but if it works out, you can merge into master branch later.

How do the diagrams help you visualize the branch structure?

	it is easier to keep track of all the commits that I made on the specific branch and I can even make new branch for the new commit that I made seperated from the exisitng branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	we can see all the changes we made in one file up to date so that we can keep going on without waiting someone to finish their job to keep go on. Representing these branches in the diagram helps to remember and organize the work we have been made.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
